{"ast":null,"code":"import React, { forwardRef, useMemo, useState, useRef, useEffect } from 'react';\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\n\nvar __assign = function () {\n  __assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nfunction __rest(s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}\nfunction __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || from);\n}\n\n/**\n * Escape regex char\n *\n * See: https://stackoverflow.com/questions/17885855/use-dynamic-variable-string-as-regex-pattern-in-javascript\n */\nvar escapeRegExp = function (stringToGoIntoTheRegex) {\n  return stringToGoIntoTheRegex.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n};\nvar abbrMap = {\n  k: 1000,\n  m: 1000000,\n  b: 1000000000\n};\n/**\n * Parse a value with abbreviation e.g 1k = 1000\n */\nvar parseAbbrValue = function (value, decimalSeparator) {\n  if (decimalSeparator === void 0) {\n    decimalSeparator = '.';\n  }\n  var reg = new RegExp(\"(\\\\d+(\" + escapeRegExp(decimalSeparator) + \"\\\\d*)?)([kmb])$\", 'i');\n  var match = value.match(reg);\n  if (match) {\n    var digits = match[1],\n      abbr = match[3];\n    var multiplier = abbrMap[abbr.toLowerCase()];\n    return Number(digits.replace(decimalSeparator, '.')) * multiplier;\n  }\n  return undefined;\n};\n\n/**\n * Remove group separator from value eg. 1,000 > 1000\n */\nvar removeSeparators = function (value, separator) {\n  if (separator === void 0) {\n    separator = ',';\n  }\n  var reg = new RegExp(escapeRegExp(separator), 'g');\n  return value.replace(reg, '');\n};\n\n/**\n * Remove invalid characters\n */\nvar removeInvalidChars = function (value, validChars) {\n  var chars = escapeRegExp(validChars.join(''));\n  var reg = new RegExp(\"[^\\\\d\" + chars + \"]\", 'gi');\n  return value.replace(reg, '');\n};\n\n/**\n * Remove prefix, separators and extra decimals from value\n */\nvar cleanValue = function (_a) {\n  var value = _a.value,\n    _b = _a.groupSeparator,\n    groupSeparator = _b === void 0 ? ',' : _b,\n    _c = _a.decimalSeparator,\n    decimalSeparator = _c === void 0 ? '.' : _c,\n    _d = _a.allowDecimals,\n    allowDecimals = _d === void 0 ? true : _d,\n    _e = _a.decimalsLimit,\n    decimalsLimit = _e === void 0 ? 2 : _e,\n    _f = _a.allowNegativeValue,\n    allowNegativeValue = _f === void 0 ? true : _f,\n    _g = _a.disableAbbreviations,\n    disableAbbreviations = _g === void 0 ? false : _g,\n    _h = _a.prefix,\n    prefix = _h === void 0 ? '' : _h,\n    _j = _a.transformRawValue,\n    transformRawValue = _j === void 0 ? function (rawValue) {\n      return rawValue;\n    } : _j;\n  var transformedValue = transformRawValue(value);\n  if (transformedValue === '-') {\n    return transformedValue;\n  }\n  var abbreviations = disableAbbreviations ? [] : ['k', 'm', 'b'];\n  var reg = new RegExp(\"((^|\\\\D)-\\\\d)|(-\" + escapeRegExp(prefix) + \")\");\n  var isNegative = reg.test(transformedValue);\n  // Is there a digit before the prefix? eg. 1$\n  var _k = RegExp(\"(\\\\d+)-?\" + escapeRegExp(prefix)).exec(value) || [],\n    prefixWithValue = _k[0],\n    preValue = _k[1];\n  var withoutPrefix = prefix ? prefixWithValue ? transformedValue.replace(prefixWithValue, '').concat(preValue) : transformedValue.replace(prefix, '') : transformedValue;\n  var withoutSeparators = removeSeparators(withoutPrefix, groupSeparator);\n  var withoutInvalidChars = removeInvalidChars(withoutSeparators, __spreadArray([groupSeparator, decimalSeparator], abbreviations));\n  var valueOnly = withoutInvalidChars;\n  if (!disableAbbreviations) {\n    // disallow letter without number\n    if (abbreviations.some(function (letter) {\n      return letter === withoutInvalidChars.toLowerCase();\n    })) {\n      return '';\n    }\n    var parsed = parseAbbrValue(withoutInvalidChars, decimalSeparator);\n    if (parsed) {\n      valueOnly = String(parsed);\n    }\n  }\n  var includeNegative = isNegative && allowNegativeValue ? '-' : '';\n  if (decimalSeparator && valueOnly.includes(decimalSeparator)) {\n    var _l = withoutInvalidChars.split(decimalSeparator),\n      int = _l[0],\n      decimals = _l[1];\n    var trimmedDecimals = decimalsLimit && decimals ? decimals.slice(0, decimalsLimit) : decimals;\n    var includeDecimals = allowDecimals ? \"\" + decimalSeparator + trimmedDecimals : '';\n    return \"\" + includeNegative + int + includeDecimals;\n  }\n  return \"\" + includeNegative + valueOnly;\n};\nvar fixedDecimalValue = function (value, decimalSeparator, fixedDecimalLength) {\n  if (fixedDecimalLength && value.length > 1) {\n    if (value.includes(decimalSeparator)) {\n      var _a = value.split(decimalSeparator),\n        int = _a[0],\n        decimals = _a[1];\n      if (decimals.length > fixedDecimalLength) {\n        return \"\" + int + decimalSeparator + decimals.slice(0, fixedDecimalLength);\n      }\n    }\n    var reg = value.length > fixedDecimalLength ? new RegExp(\"(\\\\d+)(\\\\d{\" + fixedDecimalLength + \"})\") : new RegExp(\"(\\\\d)(\\\\d+)\");\n    var match = value.match(reg);\n    if (match) {\n      var int = match[1],\n        decimals = match[2];\n      return \"\" + int + decimalSeparator + decimals;\n    }\n  }\n  return value;\n};\nvar getSuffix = function (value, _a) {\n  var _b = _a.groupSeparator,\n    groupSeparator = _b === void 0 ? ',' : _b,\n    _c = _a.decimalSeparator,\n    decimalSeparator = _c === void 0 ? '.' : _c;\n  var suffixReg = new RegExp(\"\\\\d([^\" + escapeRegExp(groupSeparator) + escapeRegExp(decimalSeparator) + \"0-9]+)\");\n  var suffixMatch = value.match(suffixReg);\n  return suffixMatch ? suffixMatch[1] : undefined;\n};\n\n/**\n * Format value with decimal separator, group separator and prefix\n */\nvar formatValue = function (options) {\n  var _value = options.value,\n    decimalSeparator = options.decimalSeparator,\n    intlConfig = options.intlConfig,\n    decimalScale = options.decimalScale,\n    _a = options.prefix,\n    prefix = _a === void 0 ? '' : _a,\n    _b = options.suffix,\n    suffix = _b === void 0 ? '' : _b;\n  if (_value === '' || _value === undefined) {\n    return '';\n  }\n  if (_value === '-') {\n    return '-';\n  }\n  var isNegative = new RegExp(\"^\\\\d?-\" + (prefix ? escapeRegExp(prefix) + \"?\" : '') + \"\\\\d\").test(_value);\n  var value = decimalSeparator !== '.' ? replaceDecimalSeparator(_value, decimalSeparator, isNegative) : _value;\n  var defaultNumberFormatOptions = {\n    minimumFractionDigits: decimalScale || 0,\n    maximumFractionDigits: 20\n  };\n  var numberFormatter = intlConfig ? new Intl.NumberFormat(intlConfig.locale, intlConfig.currency ? __assign(__assign({}, defaultNumberFormatOptions), {\n    style: 'currency',\n    currency: intlConfig.currency\n  }) : defaultNumberFormatOptions) : new Intl.NumberFormat(undefined, defaultNumberFormatOptions);\n  var parts = numberFormatter.formatToParts(Number(value));\n  var formatted = replaceParts(parts, options);\n  // Does intl formatting add a suffix?\n  var intlSuffix = getSuffix(formatted, __assign({}, options));\n  // Include decimal separator if user input ends with decimal separator\n  var includeDecimalSeparator = _value.slice(-1) === decimalSeparator ? decimalSeparator : '';\n  var _c = value.match(RegExp('\\\\d+\\\\.(\\\\d+)')) || [],\n    decimals = _c[1];\n  // Keep original decimal padding if no decimalScale\n  if (decimalScale === undefined && decimals && decimalSeparator) {\n    if (formatted.includes(decimalSeparator)) {\n      formatted = formatted.replace(RegExp(\"(\\\\d+)(\" + escapeRegExp(decimalSeparator) + \")(\\\\d+)\", 'g'), \"$1$2\" + decimals);\n    } else {\n      if (intlSuffix && !suffix) {\n        formatted = formatted.replace(intlSuffix, \"\" + decimalSeparator + decimals + intlSuffix);\n      } else {\n        formatted = \"\" + formatted + decimalSeparator + decimals;\n      }\n    }\n  }\n  if (suffix && includeDecimalSeparator) {\n    return \"\" + formatted + includeDecimalSeparator + suffix;\n  }\n  if (intlSuffix && includeDecimalSeparator) {\n    return formatted.replace(intlSuffix, \"\" + includeDecimalSeparator + intlSuffix);\n  }\n  if (intlSuffix && suffix) {\n    return formatted.replace(intlSuffix, \"\" + includeDecimalSeparator + suffix);\n  }\n  return [formatted, includeDecimalSeparator, suffix].join('');\n};\n/**\n * Before converting to Number, decimal separator has to be .\n */\nvar replaceDecimalSeparator = function (value, decimalSeparator, isNegative) {\n  var newValue = value;\n  if (decimalSeparator && decimalSeparator !== '.') {\n    newValue = newValue.replace(RegExp(escapeRegExp(decimalSeparator), 'g'), '.');\n    if (isNegative && decimalSeparator === '-') {\n      newValue = \"-\" + newValue.slice(1);\n    }\n  }\n  return newValue;\n};\nvar replaceParts = function (parts, _a) {\n  var prefix = _a.prefix,\n    groupSeparator = _a.groupSeparator,\n    decimalSeparator = _a.decimalSeparator,\n    decimalScale = _a.decimalScale,\n    _b = _a.disableGroupSeparators,\n    disableGroupSeparators = _b === void 0 ? false : _b;\n  return parts.reduce(function (prev, _a, i) {\n    var type = _a.type,\n      value = _a.value;\n    if (i === 0 && prefix) {\n      if (type === 'minusSign') {\n        return [value, prefix];\n      }\n      if (type === 'currency') {\n        return __spreadArray(__spreadArray([], prev), [prefix]);\n      }\n      return [prefix, value];\n    }\n    if (type === 'currency') {\n      return prefix ? prev : __spreadArray(__spreadArray([], prev), [value]);\n    }\n    if (type === 'group') {\n      return !disableGroupSeparators ? __spreadArray(__spreadArray([], prev), [groupSeparator !== undefined ? groupSeparator : value]) : prev;\n    }\n    if (type === 'decimal') {\n      if (decimalScale !== undefined && decimalScale === 0) {\n        return prev;\n      }\n      return __spreadArray(__spreadArray([], prev), [decimalSeparator !== undefined ? decimalSeparator : value]);\n    }\n    if (type === 'fraction') {\n      return __spreadArray(__spreadArray([], prev), [decimalScale !== undefined ? value.slice(0, decimalScale) : value]);\n    }\n    return __spreadArray(__spreadArray([], prev), [value]);\n  }, ['']).join('');\n};\nvar defaultConfig = {\n  currencySymbol: '',\n  groupSeparator: '',\n  decimalSeparator: '',\n  prefix: '',\n  suffix: ''\n};\n/**\n * Get locale config from input or default\n */\nvar getLocaleConfig = function (intlConfig) {\n  var _a = intlConfig || {},\n    locale = _a.locale,\n    currency = _a.currency;\n  var numberFormatter = locale ? new Intl.NumberFormat(locale, currency ? {\n    currency: currency,\n    style: 'currency'\n  } : undefined) : new Intl.NumberFormat();\n  return numberFormatter.formatToParts(1000.1).reduce(function (prev, curr, i) {\n    if (curr.type === 'currency') {\n      if (i === 0) {\n        return __assign(__assign({}, prev), {\n          currencySymbol: curr.value,\n          prefix: curr.value\n        });\n      } else {\n        return __assign(__assign({}, prev), {\n          currencySymbol: curr.value,\n          suffix: curr.value\n        });\n      }\n    }\n    if (curr.type === 'group') {\n      return __assign(__assign({}, prev), {\n        groupSeparator: curr.value\n      });\n    }\n    if (curr.type === 'decimal') {\n      return __assign(__assign({}, prev), {\n        decimalSeparator: curr.value\n      });\n    }\n    return prev;\n  }, defaultConfig);\n};\nvar isNumber = function (input) {\n  return RegExp(/\\d/, 'gi').test(input);\n};\nvar padTrimValue = function (value, decimalSeparator, decimalScale) {\n  if (decimalSeparator === void 0) {\n    decimalSeparator = '.';\n  }\n  if (decimalScale === undefined || value === '' || value === undefined) {\n    return value;\n  }\n  if (!value.match(/\\d/g)) {\n    return '';\n  }\n  var _a = value.split(decimalSeparator),\n    int = _a[0],\n    decimals = _a[1];\n  if (decimalScale === 0) {\n    return int;\n  }\n  var newValue = decimals || '';\n  if (newValue.length < decimalScale) {\n    while (newValue.length < decimalScale) {\n      newValue += '0';\n    }\n  } else {\n    newValue = newValue.slice(0, decimalScale);\n  }\n  return \"\" + int + decimalSeparator + newValue;\n};\n\n/**\n * Based on the last key stroke and the cursor position, update the value\n * and reposition the cursor to the right place\n */\nvar repositionCursor = function (_a) {\n  var selectionStart = _a.selectionStart,\n    value = _a.value,\n    lastKeyStroke = _a.lastKeyStroke,\n    stateValue = _a.stateValue,\n    groupSeparator = _a.groupSeparator;\n  var cursorPosition = selectionStart;\n  var modifiedValue = value;\n  if (stateValue && cursorPosition) {\n    var splitValue = value.split('');\n    // if cursor is to right of groupSeparator and backspace pressed, delete the character to the left of the separator and reposition the cursor\n    if (lastKeyStroke === 'Backspace' && stateValue[cursorPosition] === groupSeparator) {\n      splitValue.splice(cursorPosition - 1, 1);\n      cursorPosition -= 1;\n    }\n    // if cursor is to left of groupSeparator and delete pressed, delete the character to the right of the separator and reposition the cursor\n    if (lastKeyStroke === 'Delete' && stateValue[cursorPosition] === groupSeparator) {\n      splitValue.splice(cursorPosition, 1);\n      cursorPosition += 1;\n    }\n    modifiedValue = splitValue.join('');\n    return {\n      modifiedValue: modifiedValue,\n      cursorPosition: cursorPosition\n    };\n  }\n  return {\n    modifiedValue: modifiedValue,\n    cursorPosition: selectionStart\n  };\n};\nvar CurrencyInput = forwardRef(function (_a, ref) {\n  var _b = _a.allowDecimals,\n    allowDecimals = _b === void 0 ? true : _b,\n    _c = _a.allowNegativeValue,\n    allowNegativeValue = _c === void 0 ? true : _c,\n    id = _a.id,\n    name = _a.name,\n    className = _a.className,\n    customInput = _a.customInput,\n    decimalsLimit = _a.decimalsLimit,\n    defaultValue = _a.defaultValue,\n    _d = _a.disabled,\n    disabled = _d === void 0 ? false : _d,\n    userMaxLength = _a.maxLength,\n    userValue = _a.value,\n    onValueChange = _a.onValueChange,\n    fixedDecimalLength = _a.fixedDecimalLength,\n    placeholder = _a.placeholder,\n    decimalScale = _a.decimalScale,\n    prefix = _a.prefix,\n    suffix = _a.suffix,\n    intlConfig = _a.intlConfig,\n    step = _a.step,\n    min = _a.min,\n    max = _a.max,\n    _e = _a.disableGroupSeparators,\n    disableGroupSeparators = _e === void 0 ? false : _e,\n    _f = _a.disableAbbreviations,\n    disableAbbreviations = _f === void 0 ? false : _f,\n    _decimalSeparator = _a.decimalSeparator,\n    _groupSeparator = _a.groupSeparator,\n    onChange = _a.onChange,\n    onFocus = _a.onFocus,\n    onBlur = _a.onBlur,\n    onKeyDown = _a.onKeyDown,\n    onKeyUp = _a.onKeyUp,\n    transformRawValue = _a.transformRawValue,\n    props = __rest(_a, [\"allowDecimals\", \"allowNegativeValue\", \"id\", \"name\", \"className\", \"customInput\", \"decimalsLimit\", \"defaultValue\", \"disabled\", \"maxLength\", \"value\", \"onValueChange\", \"fixedDecimalLength\", \"placeholder\", \"decimalScale\", \"prefix\", \"suffix\", \"intlConfig\", \"step\", \"min\", \"max\", \"disableGroupSeparators\", \"disableAbbreviations\", \"decimalSeparator\", \"groupSeparator\", \"onChange\", \"onFocus\", \"onBlur\", \"onKeyDown\", \"onKeyUp\", \"transformRawValue\"]);\n  if (_decimalSeparator && isNumber(_decimalSeparator)) {\n    throw new Error('decimalSeparator cannot be a number');\n  }\n  if (_groupSeparator && isNumber(_groupSeparator)) {\n    throw new Error('groupSeparator cannot be a number');\n  }\n  var localeConfig = useMemo(function () {\n    return getLocaleConfig(intlConfig);\n  }, [intlConfig]);\n  var decimalSeparator = _decimalSeparator || localeConfig.decimalSeparator || '';\n  var groupSeparator = _groupSeparator || localeConfig.groupSeparator || '';\n  if (decimalSeparator && groupSeparator && decimalSeparator === groupSeparator && disableGroupSeparators === false) {\n    throw new Error('decimalSeparator cannot be the same as groupSeparator');\n  }\n  var formatValueOptions = {\n    decimalSeparator: decimalSeparator,\n    groupSeparator: groupSeparator,\n    disableGroupSeparators: disableGroupSeparators,\n    intlConfig: intlConfig,\n    prefix: prefix || localeConfig.prefix,\n    suffix: suffix\n  };\n  var cleanValueOptions = {\n    decimalSeparator: decimalSeparator,\n    groupSeparator: groupSeparator,\n    allowDecimals: allowDecimals,\n    decimalsLimit: decimalsLimit || fixedDecimalLength || 2,\n    allowNegativeValue: allowNegativeValue,\n    disableAbbreviations: disableAbbreviations,\n    prefix: prefix || localeConfig.prefix,\n    transformRawValue: transformRawValue\n  };\n  var formattedStateValue = defaultValue !== undefined && defaultValue !== null ? formatValue(__assign(__assign({}, formatValueOptions), {\n    decimalScale: decimalScale,\n    value: String(defaultValue)\n  })) : userValue !== undefined && userValue !== null ? formatValue(__assign(__assign({}, formatValueOptions), {\n    decimalScale: decimalScale,\n    value: String(userValue)\n  })) : '';\n  var _g = useState(formattedStateValue),\n    stateValue = _g[0],\n    setStateValue = _g[1];\n  var _h = useState(false),\n    dirty = _h[0],\n    setDirty = _h[1];\n  var _j = useState(0),\n    cursor = _j[0],\n    setCursor = _j[1];\n  var _k = useState(0),\n    changeCount = _k[0],\n    setChangeCount = _k[1];\n  var _l = useState(null),\n    lastKeyStroke = _l[0],\n    setLastKeyStroke = _l[1];\n  var inputRef = ref || useRef(null);\n  /**\n   * Process change in value\n   */\n  var processChange = function (value, selectionStart) {\n    setDirty(true);\n    var _a = repositionCursor({\n        selectionStart: selectionStart,\n        value: value,\n        lastKeyStroke: lastKeyStroke,\n        stateValue: stateValue,\n        groupSeparator: groupSeparator\n      }),\n      modifiedValue = _a.modifiedValue,\n      cursorPosition = _a.cursorPosition;\n    var stringValue = cleanValue(__assign({\n      value: modifiedValue\n    }, cleanValueOptions));\n    if (userMaxLength && stringValue.replace(/-/g, '').length > userMaxLength) {\n      return;\n    }\n    if (stringValue === '' || stringValue === '-' || stringValue === decimalSeparator) {\n      onValueChange && onValueChange(undefined, name, {\n        float: null,\n        formatted: '',\n        value: ''\n      });\n      setStateValue(stringValue);\n      return;\n    }\n    var stringValueWithoutSeparator = decimalSeparator ? stringValue.replace(decimalSeparator, '.') : stringValue;\n    var numberValue = parseFloat(stringValueWithoutSeparator);\n    var formattedValue = formatValue(__assign({\n      value: stringValue\n    }, formatValueOptions));\n    if (cursorPosition !== undefined && cursorPosition !== null) {\n      // Prevent cursor jumping\n      var newCursor = cursorPosition + (formattedValue.length - value.length);\n      newCursor = newCursor <= 0 ? prefix ? prefix.length : 0 : newCursor;\n      setCursor(newCursor);\n      setChangeCount(changeCount + 1);\n    }\n    setStateValue(formattedValue);\n    if (onValueChange) {\n      var values = {\n        float: numberValue,\n        formatted: formattedValue,\n        value: stringValue\n      };\n      onValueChange(stringValue, name, values);\n    }\n  };\n  /**\n   * Handle change event\n   */\n  var handleOnChange = function (event) {\n    var _a = event.target,\n      value = _a.value,\n      selectionStart = _a.selectionStart;\n    processChange(value, selectionStart);\n    onChange && onChange(event);\n  };\n  /**\n   * Handle focus event\n   */\n  var handleOnFocus = function (event) {\n    onFocus && onFocus(event);\n    return stateValue ? stateValue.length : 0;\n  };\n  /**\n   * Handle blur event\n   *\n   * Format value by padding/trimming decimals if required by\n   */\n  var handleOnBlur = function (event) {\n    var value = event.target.value;\n    var valueOnly = cleanValue(__assign({\n      value: value\n    }, cleanValueOptions));\n    if (valueOnly === '-' || !valueOnly) {\n      setStateValue('');\n      onBlur && onBlur(event);\n      return;\n    }\n    var fixedDecimals = fixedDecimalValue(valueOnly, decimalSeparator, fixedDecimalLength);\n    var newValue = padTrimValue(fixedDecimals, decimalSeparator, decimalScale !== undefined ? decimalScale : fixedDecimalLength);\n    var numberValue = parseFloat(newValue.replace(decimalSeparator, '.'));\n    var formattedValue = formatValue(__assign(__assign({}, formatValueOptions), {\n      value: newValue\n    }));\n    if (onValueChange) {\n      onValueChange(newValue, name, {\n        float: numberValue,\n        formatted: formattedValue,\n        value: newValue\n      });\n    }\n    setStateValue(formattedValue);\n    onBlur && onBlur(event);\n  };\n  /**\n   * Handle key down event\n   *\n   * Increase or decrease value by step\n   */\n  var handleOnKeyDown = function (event) {\n    var key = event.key;\n    setLastKeyStroke(key);\n    if (step && (key === 'ArrowUp' || key === 'ArrowDown')) {\n      event.preventDefault();\n      setCursor(stateValue.length);\n      var currentValue = parseFloat(userValue !== undefined && userValue !== null ? String(userValue).replace(decimalSeparator, '.') : cleanValue(__assign({\n        value: stateValue\n      }, cleanValueOptions))) || 0;\n      var newValue = key === 'ArrowUp' ? currentValue + step : currentValue - step;\n      if (min !== undefined && newValue < min) {\n        return;\n      }\n      if (max !== undefined && newValue > max) {\n        return;\n      }\n      var fixedLength = String(step).includes('.') ? Number(String(step).split('.')[1].length) : undefined;\n      processChange(String(fixedLength ? newValue.toFixed(fixedLength) : newValue).replace('.', decimalSeparator));\n    }\n    onKeyDown && onKeyDown(event);\n  };\n  /**\n   * Handle key up event\n   *\n   * Move cursor if there is a suffix to prevent user typing past suffix\n   */\n  var handleOnKeyUp = function (event) {\n    var key = event.key,\n      selectionStart = event.currentTarget.selectionStart;\n    if (key !== 'ArrowUp' && key !== 'ArrowDown' && stateValue !== '-') {\n      var suffix_1 = getSuffix(stateValue, {\n        groupSeparator: groupSeparator,\n        decimalSeparator: decimalSeparator\n      });\n      if (suffix_1 && selectionStart && selectionStart > stateValue.length - suffix_1.length) {\n        /* istanbul ignore else */\n        if (inputRef && typeof inputRef === 'object' && inputRef.current) {\n          var newCursor = stateValue.length - suffix_1.length;\n          inputRef.current.setSelectionRange(newCursor, newCursor);\n        }\n      }\n    }\n    onKeyUp && onKeyUp(event);\n  };\n  useEffect(function () {\n    // prevent cursor jumping if editing value\n    if (dirty && stateValue !== '-' && inputRef && typeof inputRef === 'object' && inputRef.current && document.activeElement === inputRef.current) {\n      inputRef.current.setSelectionRange(cursor, cursor);\n    }\n  }, [stateValue, cursor, inputRef, dirty, changeCount]);\n  /**\n   * If user has only entered \"-\" or decimal separator,\n   * keep the char to allow them to enter next value\n   */\n  var getRenderValue = function () {\n    if (userValue !== undefined && userValue !== null && stateValue !== '-' && (!decimalSeparator || stateValue !== decimalSeparator)) {\n      return formatValue(__assign(__assign({}, formatValueOptions), {\n        decimalScale: dirty ? undefined : decimalScale,\n        value: String(userValue)\n      }));\n    }\n    return stateValue;\n  };\n  var inputProps = __assign({\n    type: 'text',\n    inputMode: 'decimal',\n    id: id,\n    name: name,\n    className: className,\n    onChange: handleOnChange,\n    onBlur: handleOnBlur,\n    onFocus: handleOnFocus,\n    onKeyDown: handleOnKeyDown,\n    onKeyUp: handleOnKeyUp,\n    placeholder: placeholder,\n    disabled: disabled,\n    value: getRenderValue(),\n    ref: inputRef\n  }, props);\n  if (customInput) {\n    var CustomInput = customInput;\n    return React.createElement(CustomInput, __assign({}, inputProps));\n  }\n  return React.createElement(\"input\", __assign({}, inputProps));\n});\nCurrencyInput.displayName = 'CurrencyInput';\nexport default CurrencyInput;\nexport { formatValue };","map":{"version":3,"mappings":"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","names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__rest","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","__spreadArray","to","from","pack","l","ar","Array","slice","concat","escapeRegExp","stringToGoIntoTheRegex","replace","abbrMap","k","m","b","parseAbbrValue","value","decimalSeparator","reg","RegExp","match","abbr","multiplier","toLowerCase","Number","digits","undefined","removeSeparators","separator","removeInvalidChars","validChars","chars","join","cleanValue","_a","_b","groupSeparator","_c","_d","allowDecimals","_e","decimalsLimit","_f","allowNegativeValue","_g","disableAbbreviations","_h","prefix","_j","transformRawValue","rawValue","transformedValue","abbreviations","isNegative","test","exec","prefixWithValue","preValue","withoutPrefix","withoutSeparators","withoutInvalidChars","valueOnly","some","letter","parsed","String","includeNegative","includes","split","int","decimals","trimmedDecimals","includeDecimals","fixedDecimalValue","fixedDecimalLength","getSuffix","suffixReg","suffixMatch","formatValue","options","_value","intlConfig","decimalScale","suffix","replaceDecimalSeparator","defaultNumberFormatOptions","minimumFractionDigits","maximumFractionDigits","numberFormatter","Intl","NumberFormat","locale","currency","style","parts","formatToParts","formatted","replaceParts","intlSuffix","includeDecimalSeparator","newValue","disableGroupSeparators","reduce","prev","type","defaultConfig","currencySymbol","getLocaleConfig","curr","isNumber","input","padTrimValue","repositionCursor","selectionStart","lastKeyStroke","stateValue","cursorPosition","modifiedValue","splitValue","splice","CurrencyInput","forwardRef","ref","id","name","className","customInput","defaultValue","disabled","userMaxLength","userValue","onValueChange","placeholder","step","min","max","_decimalSeparator","_groupSeparator","onChange","onFocus","onBlur","onKeyDown","onKeyUp","props","Error","localeConfig","useMemo","formatValueOptions","cleanValueOptions","formattedStateValue","useState","setStateValue","dirty","setDirty","cursor","setCursor","changeCount","setChangeCount","setLastKeyStroke","inputRef","useRef","processChange","stringValue","float","stringValueWithoutSeparator","numberValue","parseFloat","formattedValue","newCursor","values","handleOnChange","event","handleOnFocus","handleOnBlur","fixedDecimals","handleOnKeyDown","key","preventDefault","currentValue","fixedLength","toFixed","handleOnKeyUp","suffix_1","current","setSelectionRange","useEffect","document","activeElement","getRenderValue","inputProps","inputMode","CustomInput","React","displayName"],"sources":["C:\\Users\\nguyl\\Downloads\\src-20230417T061757Z-001\\node_modules\\react-currency-input-field\\node_modules\\tslib\\tslib.es6.js","C:\\Users\\nguyl\\Downloads\\src-20230417T061757Z-001\\node_modules\\react-currency-input-field\\src\\components\\utils\\escapeRegExp.ts","C:\\Users\\nguyl\\Downloads\\src-20230417T061757Z-001\\node_modules\\react-currency-input-field\\src\\components\\utils\\parseAbbrValue.ts","C:\\Users\\nguyl\\Downloads\\src-20230417T061757Z-001\\node_modules\\react-currency-input-field\\src\\components\\utils\\removeSeparators.ts","C:\\Users\\nguyl\\Downloads\\src-20230417T061757Z-001\\node_modules\\react-currency-input-field\\src\\components\\utils\\removeInvalidChars.ts","C:\\Users\\nguyl\\Downloads\\src-20230417T061757Z-001\\node_modules\\react-currency-input-field\\src\\components\\utils\\cleanValue.ts","C:\\Users\\nguyl\\Downloads\\src-20230417T061757Z-001\\node_modules\\react-currency-input-field\\src\\components\\utils\\fixedDecimalValue.ts","C:\\Users\\nguyl\\Downloads\\src-20230417T061757Z-001\\node_modules\\react-currency-input-field\\src\\components\\utils\\getSuffix.ts","C:\\Users\\nguyl\\Downloads\\src-20230417T061757Z-001\\node_modules\\react-currency-input-field\\src\\components\\utils\\formatValue.ts","C:\\Users\\nguyl\\Downloads\\src-20230417T061757Z-001\\node_modules\\react-currency-input-field\\src\\components\\utils\\getLocaleConfig.ts","C:\\Users\\nguyl\\Downloads\\src-20230417T061757Z-001\\node_modules\\react-currency-input-field\\src\\components\\utils\\isNumber.ts","C:\\Users\\nguyl\\Downloads\\src-20230417T061757Z-001\\node_modules\\react-currency-input-field\\src\\components\\utils\\padTrimValue.ts","C:\\Users\\nguyl\\Downloads\\src-20230417T061757Z-001\\node_modules\\react-currency-input-field\\src\\components\\utils\\repositionCursor.ts","C:\\Users\\nguyl\\Downloads\\src-20230417T061757Z-001\\node_modules\\react-currency-input-field\\src\\components\\CurrencyInput.tsx"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || from);\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n","/**\n * Escape regex char\n *\n * See: https://stackoverflow.com/questions/17885855/use-dynamic-variable-string-as-regex-pattern-in-javascript\n */\nexport const escapeRegExp = (stringToGoIntoTheRegex: string): string => {\n  return stringToGoIntoTheRegex.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n};\n","import { escapeRegExp } from './escapeRegExp';\n\n/**\n * Abbreviate number eg. 1000 = 1k\n *\n * Source: https://stackoverflow.com/a/9345181\n */\nexport const abbrValue = (value: number, decimalSeparator = '.', _decimalPlaces = 10): string => {\n  if (value > 999) {\n    let valueLength = ('' + value).length;\n    const p = Math.pow;\n    const d = p(10, _decimalPlaces);\n    valueLength -= valueLength % 3;\n\n    const abbrValue = Math.round((value * d) / p(10, valueLength)) / d + ' kMGTPE'[valueLength / 3];\n    return abbrValue.replace('.', decimalSeparator);\n  }\n\n  return String(value);\n};\n\ntype AbbrMap = { [key: string]: number };\n\nconst abbrMap: AbbrMap = { k: 1000, m: 1000000, b: 1000000000 };\n\n/**\n * Parse a value with abbreviation e.g 1k = 1000\n */\nexport const parseAbbrValue = (value: string, decimalSeparator = '.'): number | undefined => {\n  const reg = new RegExp(`(\\\\d+(${escapeRegExp(decimalSeparator)}\\\\d*)?)([kmb])$`, 'i');\n  const match = value.match(reg);\n\n  if (match) {\n    const [, digits, , abbr] = match;\n    const multiplier = abbrMap[abbr.toLowerCase()];\n\n    return Number(digits.replace(decimalSeparator, '.')) * multiplier;\n  }\n\n  return undefined;\n};\n","import { escapeRegExp } from './escapeRegExp';\n\n/**\n * Remove group separator from value eg. 1,000 > 1000\n */\nexport const removeSeparators = (value: string, separator = ','): string => {\n  const reg = new RegExp(escapeRegExp(separator), 'g');\n  return value.replace(reg, '');\n};\n","import { escapeRegExp } from './escapeRegExp';\n\n/**\n * Remove invalid characters\n */\nexport const removeInvalidChars = (value: string, validChars: ReadonlyArray<string>): string => {\n  const chars = escapeRegExp(validChars.join(''));\n  const reg = new RegExp(`[^\\\\d${chars}]`, 'gi');\n  return value.replace(reg, '');\n};\n","import { parseAbbrValue } from './parseAbbrValue';\nimport { removeSeparators } from './removeSeparators';\nimport { removeInvalidChars } from './removeInvalidChars';\nimport { escapeRegExp } from './escapeRegExp';\nimport { CurrencyInputProps } from '../CurrencyInputProps';\n\nexport type CleanValueOptions = Pick<\n  CurrencyInputProps,\n  | 'decimalSeparator'\n  | 'groupSeparator'\n  | 'allowDecimals'\n  | 'decimalsLimit'\n  | 'allowNegativeValue'\n  | 'disableAbbreviations'\n  | 'prefix'\n  | 'transformRawValue'\n> & { value: string };\n\n/**\n * Remove prefix, separators and extra decimals from value\n */\nexport const cleanValue = ({\n  value,\n  groupSeparator = ',',\n  decimalSeparator = '.',\n  allowDecimals = true,\n  decimalsLimit = 2,\n  allowNegativeValue = true,\n  disableAbbreviations = false,\n  prefix = '',\n  transformRawValue = (rawValue) => rawValue,\n}: CleanValueOptions): string => {\n  const transformedValue = transformRawValue(value);\n\n  if (transformedValue === '-') {\n    return transformedValue;\n  }\n\n  const abbreviations = disableAbbreviations ? [] : ['k', 'm', 'b'];\n  const reg = new RegExp(`((^|\\\\D)-\\\\d)|(-${escapeRegExp(prefix)})`);\n  const isNegative = reg.test(transformedValue);\n\n  // Is there a digit before the prefix? eg. 1$\n  const [prefixWithValue, preValue] = RegExp(`(\\\\d+)-?${escapeRegExp(prefix)}`).exec(value) || [];\n  const withoutPrefix = prefix\n    ? prefixWithValue\n      ? transformedValue.replace(prefixWithValue, '').concat(preValue)\n      : transformedValue.replace(prefix, '')\n    : transformedValue;\n  const withoutSeparators = removeSeparators(withoutPrefix, groupSeparator);\n  const withoutInvalidChars = removeInvalidChars(withoutSeparators, [\n    groupSeparator,\n    decimalSeparator,\n    ...abbreviations,\n  ]);\n\n  let valueOnly = withoutInvalidChars;\n\n  if (!disableAbbreviations) {\n    // disallow letter without number\n    if (abbreviations.some((letter) => letter === withoutInvalidChars.toLowerCase())) {\n      return '';\n    }\n    const parsed = parseAbbrValue(withoutInvalidChars, decimalSeparator);\n    if (parsed) {\n      valueOnly = String(parsed);\n    }\n  }\n\n  const includeNegative = isNegative && allowNegativeValue ? '-' : '';\n\n  if (decimalSeparator && valueOnly.includes(decimalSeparator)) {\n    const [int, decimals] = withoutInvalidChars.split(decimalSeparator);\n    const trimmedDecimals = decimalsLimit && decimals ? decimals.slice(0, decimalsLimit) : decimals;\n    const includeDecimals = allowDecimals ? `${decimalSeparator}${trimmedDecimals}` : '';\n\n    return `${includeNegative}${int}${includeDecimals}`;\n  }\n\n  return `${includeNegative}${valueOnly}`;\n};\n","export const fixedDecimalValue = (\n  value: string,\n  decimalSeparator: string,\n  fixedDecimalLength?: number\n): string => {\n  if (fixedDecimalLength && value.length > 1) {\n    if (value.includes(decimalSeparator)) {\n      const [int, decimals] = value.split(decimalSeparator);\n      if (decimals.length > fixedDecimalLength) {\n        return `${int}${decimalSeparator}${decimals.slice(0, fixedDecimalLength)}`;\n      }\n    }\n\n    const reg =\n      value.length > fixedDecimalLength\n        ? new RegExp(`(\\\\d+)(\\\\d{${fixedDecimalLength}})`)\n        : new RegExp(`(\\\\d)(\\\\d+)`);\n\n    const match = value.match(reg);\n    if (match) {\n      const [, int, decimals] = match;\n      return `${int}${decimalSeparator}${decimals}`;\n    }\n  }\n\n  return value;\n};\n","import { escapeRegExp } from './escapeRegExp';\ntype Options = {\n  decimalSeparator?: string;\n  groupSeparator?: string;\n};\n\nexport const getSuffix = (\n  value: string,\n  { groupSeparator = ',', decimalSeparator = '.' }: Options\n): string | undefined => {\n  const suffixReg = new RegExp(\n    `\\\\d([^${escapeRegExp(groupSeparator)}${escapeRegExp(decimalSeparator)}0-9]+)`\n  );\n  const suffixMatch = value.match(suffixReg);\n  return suffixMatch ? suffixMatch[1] : undefined;\n};\n","import { IntlConfig } from '../CurrencyInputProps';\nimport { escapeRegExp } from './escapeRegExp';\nimport { getSuffix } from './getSuffix';\n\nexport type FormatValueOptions = {\n  /**\n   * Value to format\n   */\n  value: string | undefined;\n\n  /**\n   * Decimal separator\n   *\n   * Default = '.'\n   */\n  decimalSeparator?: string;\n\n  /**\n   * Group separator\n   *\n   * Default = ','\n   */\n  groupSeparator?: string;\n\n  /**\n   * Turn off separators\n   *\n   * This will override Group separators\n   *\n   * Default = false\n   */\n  disableGroupSeparators?: boolean;\n\n  /**\n   * Intl locale currency config\n   */\n  intlConfig?: IntlConfig;\n\n  /**\n   * Specify decimal scale for padding/trimming\n   *\n   * Eg. 1.5 -> 1.50 or 1.234 -> 1.23\n   */\n  decimalScale?: number;\n\n  /**\n   * Prefix\n   */\n  prefix?: string;\n\n  /**\n   * Suffix\n   */\n  suffix?: string;\n};\n\n/**\n * Format value with decimal separator, group separator and prefix\n */\nexport const formatValue = (options: FormatValueOptions): string => {\n  const {\n    value: _value,\n    decimalSeparator,\n    intlConfig,\n    decimalScale,\n    prefix = '',\n    suffix = '',\n  } = options;\n\n  if (_value === '' || _value === undefined) {\n    return '';\n  }\n\n  if (_value === '-') {\n    return '-';\n  }\n\n  const isNegative = new RegExp(`^\\\\d?-${prefix ? `${escapeRegExp(prefix)}?` : ''}\\\\d`).test(\n    _value\n  );\n\n  const value =\n    decimalSeparator !== '.'\n      ? replaceDecimalSeparator(_value, decimalSeparator, isNegative)\n      : _value;\n\n  const defaultNumberFormatOptions = {\n    minimumFractionDigits: decimalScale || 0,\n    maximumFractionDigits: 20,\n  };\n\n  const numberFormatter = intlConfig\n    ? new Intl.NumberFormat(\n        intlConfig.locale,\n        intlConfig.currency\n          ? {\n              ...defaultNumberFormatOptions,\n              style: 'currency',\n              currency: intlConfig.currency,\n            }\n          : defaultNumberFormatOptions\n      )\n    : new Intl.NumberFormat(undefined, defaultNumberFormatOptions);\n\n  const parts = numberFormatter.formatToParts(Number(value));\n\n  let formatted = replaceParts(parts, options);\n\n  // Does intl formatting add a suffix?\n  const intlSuffix = getSuffix(formatted, { ...options });\n\n  // Include decimal separator if user input ends with decimal separator\n  const includeDecimalSeparator = _value.slice(-1) === decimalSeparator ? decimalSeparator : '';\n\n  const [, decimals] = value.match(RegExp('\\\\d+\\\\.(\\\\d+)')) || [];\n\n  // Keep original decimal padding if no decimalScale\n  if (decimalScale === undefined && decimals && decimalSeparator) {\n    if (formatted.includes(decimalSeparator)) {\n      formatted = formatted.replace(\n        RegExp(`(\\\\d+)(${escapeRegExp(decimalSeparator)})(\\\\d+)`, 'g'),\n        `$1$2${decimals}`\n      );\n    } else {\n      if (intlSuffix && !suffix) {\n        formatted = formatted.replace(intlSuffix, `${decimalSeparator}${decimals}${intlSuffix}`);\n      } else {\n        formatted = `${formatted}${decimalSeparator}${decimals}`;\n      }\n    }\n  }\n\n  if (suffix && includeDecimalSeparator) {\n    return `${formatted}${includeDecimalSeparator}${suffix}`;\n  }\n\n  if (intlSuffix && includeDecimalSeparator) {\n    return formatted.replace(intlSuffix, `${includeDecimalSeparator}${intlSuffix}`);\n  }\n\n  if (intlSuffix && suffix) {\n    return formatted.replace(intlSuffix, `${includeDecimalSeparator}${suffix}`);\n  }\n\n  return [formatted, includeDecimalSeparator, suffix].join('');\n};\n\n/**\n * Before converting to Number, decimal separator has to be .\n */\nconst replaceDecimalSeparator = (\n  value: string,\n  decimalSeparator: FormatValueOptions['decimalSeparator'],\n  isNegative: boolean\n): string => {\n  let newValue = value;\n  if (decimalSeparator && decimalSeparator !== '.') {\n    newValue = newValue.replace(RegExp(escapeRegExp(decimalSeparator), 'g'), '.');\n    if (isNegative && decimalSeparator === '-') {\n      newValue = `-${newValue.slice(1)}`;\n    }\n  }\n  return newValue;\n};\n\nconst replaceParts = (\n  parts: Intl.NumberFormatPart[],\n  {\n    prefix,\n    groupSeparator,\n    decimalSeparator,\n    decimalScale,\n    disableGroupSeparators = false,\n  }: Pick<\n    FormatValueOptions,\n    'prefix' | 'groupSeparator' | 'decimalSeparator' | 'decimalScale' | 'disableGroupSeparators'\n  >\n): string => {\n  return parts\n    .reduce(\n      (prev, { type, value }, i) => {\n        if (i === 0 && prefix) {\n          if (type === 'minusSign') {\n            return [value, prefix];\n          }\n\n          if (type === 'currency') {\n            return [...prev, prefix];\n          }\n\n          return [prefix, value];\n        }\n\n        if (type === 'currency') {\n          return prefix ? prev : [...prev, value];\n        }\n\n        if (type === 'group') {\n          return !disableGroupSeparators\n            ? [...prev, groupSeparator !== undefined ? groupSeparator : value]\n            : prev;\n        }\n\n        if (type === 'decimal') {\n          if (decimalScale !== undefined && decimalScale === 0) {\n            return prev;\n          }\n\n          return [...prev, decimalSeparator !== undefined ? decimalSeparator : value];\n        }\n\n        if (type === 'fraction') {\n          return [...prev, decimalScale !== undefined ? value.slice(0, decimalScale) : value];\n        }\n\n        return [...prev, value];\n      },\n      ['']\n    )\n    .join('');\n};\n","import { IntlConfig } from '../CurrencyInputProps';\n\ntype LocaleConfig = {\n  currencySymbol: string;\n  groupSeparator: string;\n  decimalSeparator: string;\n  prefix: string;\n  suffix: string;\n};\n\nconst defaultConfig: LocaleConfig = {\n  currencySymbol: '',\n  groupSeparator: '',\n  decimalSeparator: '',\n  prefix: '',\n  suffix: '',\n};\n\n/**\n * Get locale config from input or default\n */\nexport const getLocaleConfig = (intlConfig?: IntlConfig): LocaleConfig => {\n  const { locale, currency } = intlConfig || {};\n  const numberFormatter = locale\n    ? new Intl.NumberFormat(locale, currency ? { currency, style: 'currency' } : undefined)\n    : new Intl.NumberFormat();\n\n  return numberFormatter.formatToParts(1000.1).reduce((prev, curr, i): LocaleConfig => {\n    if (curr.type === 'currency') {\n      if (i === 0) {\n        return { ...prev, currencySymbol: curr.value, prefix: curr.value };\n      } else {\n        return { ...prev, currencySymbol: curr.value, suffix: curr.value };\n      }\n    }\n    if (curr.type === 'group') {\n      return { ...prev, groupSeparator: curr.value };\n    }\n    if (curr.type === 'decimal') {\n      return { ...prev, decimalSeparator: curr.value };\n    }\n\n    return prev;\n  }, defaultConfig);\n};\n","export const isNumber = (input: string): boolean => RegExp(/\\d/, 'gi').test(input);\n","export const padTrimValue = (\n  value: string,\n  decimalSeparator = '.',\n  decimalScale?: number\n): string => {\n  if (decimalScale === undefined || value === '' || value === undefined) {\n    return value;\n  }\n\n  if (!value.match(/\\d/g)) {\n    return '';\n  }\n\n  const [int, decimals] = value.split(decimalSeparator);\n\n  if (decimalScale === 0) {\n    return int;\n  }\n\n  let newValue = decimals || '';\n\n  if (newValue.length < decimalScale) {\n    while (newValue.length < decimalScale) {\n      newValue += '0';\n    }\n  } else {\n    newValue = newValue.slice(0, decimalScale);\n  }\n\n  return `${int}${decimalSeparator}${newValue}`;\n};\n","type RepositionCursorProps = {\n  selectionStart?: number | null;\n  value: string;\n  lastKeyStroke: string | null;\n  stateValue?: string;\n  groupSeparator?: string;\n};\n\n/**\n * Based on the last key stroke and the cursor position, update the value\n * and reposition the cursor to the right place\n */\nexport const repositionCursor = ({\n  selectionStart,\n  value,\n  lastKeyStroke,\n  stateValue,\n  groupSeparator,\n}: RepositionCursorProps): {\n  modifiedValue: string;\n  cursorPosition: number | null | undefined;\n} => {\n  let cursorPosition = selectionStart;\n  let modifiedValue = value;\n  if (stateValue && cursorPosition) {\n    const splitValue = value.split('');\n    // if cursor is to right of groupSeparator and backspace pressed, delete the character to the left of the separator and reposition the cursor\n    if (lastKeyStroke === 'Backspace' && stateValue[cursorPosition] === groupSeparator) {\n      splitValue.splice(cursorPosition - 1, 1);\n      cursorPosition -= 1;\n    }\n    // if cursor is to left of groupSeparator and delete pressed, delete the character to the right of the separator and reposition the cursor\n    if (lastKeyStroke === 'Delete' && stateValue[cursorPosition] === groupSeparator) {\n      splitValue.splice(cursorPosition, 1);\n      cursorPosition += 1;\n    }\n    modifiedValue = splitValue.join('');\n    return { modifiedValue, cursorPosition };\n  }\n\n  return { modifiedValue, cursorPosition: selectionStart };\n};\n","import React, { FC, useState, useEffect, useRef, forwardRef, useMemo } from 'react';\nimport { CurrencyInputProps, CurrencyInputOnChangeValues } from './CurrencyInputProps';\nimport {\n  isNumber,\n  cleanValue,\n  fixedDecimalValue,\n  formatValue,\n  getLocaleConfig,\n  padTrimValue,\n  CleanValueOptions,\n  getSuffix,\n  FormatValueOptions,\n  repositionCursor,\n} from './utils';\n\nexport const CurrencyInput: FC<CurrencyInputProps> = forwardRef<\n  HTMLInputElement,\n  CurrencyInputProps\n>(\n  (\n    {\n      allowDecimals = true,\n      allowNegativeValue = true,\n      id,\n      name,\n      className,\n      customInput,\n      decimalsLimit,\n      defaultValue,\n      disabled = false,\n      maxLength: userMaxLength,\n      value: userValue,\n      onValueChange,\n      fixedDecimalLength,\n      placeholder,\n      decimalScale,\n      prefix,\n      suffix,\n      intlConfig,\n      step,\n      min,\n      max,\n      disableGroupSeparators = false,\n      disableAbbreviations = false,\n      decimalSeparator: _decimalSeparator,\n      groupSeparator: _groupSeparator,\n      onChange,\n      onFocus,\n      onBlur,\n      onKeyDown,\n      onKeyUp,\n      transformRawValue,\n      ...props\n    }: CurrencyInputProps,\n    ref\n  ) => {\n    if (_decimalSeparator && isNumber(_decimalSeparator)) {\n      throw new Error('decimalSeparator cannot be a number');\n    }\n\n    if (_groupSeparator && isNumber(_groupSeparator)) {\n      throw new Error('groupSeparator cannot be a number');\n    }\n\n    const localeConfig = useMemo(() => getLocaleConfig(intlConfig), [intlConfig]);\n    const decimalSeparator = _decimalSeparator || localeConfig.decimalSeparator || '';\n    const groupSeparator = _groupSeparator || localeConfig.groupSeparator || '';\n\n    if (\n      decimalSeparator &&\n      groupSeparator &&\n      decimalSeparator === groupSeparator &&\n      disableGroupSeparators === false\n    ) {\n      throw new Error('decimalSeparator cannot be the same as groupSeparator');\n    }\n\n    const formatValueOptions: Partial<FormatValueOptions> = {\n      decimalSeparator,\n      groupSeparator,\n      disableGroupSeparators,\n      intlConfig,\n      prefix: prefix || localeConfig.prefix,\n      suffix: suffix,\n    };\n\n    const cleanValueOptions: Partial<CleanValueOptions> = {\n      decimalSeparator,\n      groupSeparator,\n      allowDecimals,\n      decimalsLimit: decimalsLimit || fixedDecimalLength || 2,\n      allowNegativeValue,\n      disableAbbreviations,\n      prefix: prefix || localeConfig.prefix,\n      transformRawValue,\n    };\n\n    const formattedStateValue =\n      defaultValue !== undefined && defaultValue !== null\n        ? formatValue({ ...formatValueOptions, decimalScale, value: String(defaultValue) })\n        : userValue !== undefined && userValue !== null\n        ? formatValue({ ...formatValueOptions, decimalScale, value: String(userValue) })\n        : '';\n\n    const [stateValue, setStateValue] = useState(formattedStateValue);\n    const [dirty, setDirty] = useState(false);\n    const [cursor, setCursor] = useState(0);\n    const [changeCount, setChangeCount] = useState(0);\n    const [lastKeyStroke, setLastKeyStroke] = useState<string | null>(null);\n    const inputRef = ref || useRef<HTMLInputElement>(null);\n\n    /**\n     * Process change in value\n     */\n    const processChange = (value: string, selectionStart?: number | null): void => {\n      setDirty(true);\n\n      const { modifiedValue, cursorPosition } = repositionCursor({\n        selectionStart,\n        value,\n        lastKeyStroke,\n        stateValue,\n        groupSeparator,\n      });\n\n      const stringValue = cleanValue({ value: modifiedValue, ...cleanValueOptions });\n\n      if (userMaxLength && stringValue.replace(/-/g, '').length > userMaxLength) {\n        return;\n      }\n\n      if (stringValue === '' || stringValue === '-' || stringValue === decimalSeparator) {\n        onValueChange && onValueChange(undefined, name, { float: null, formatted: '', value: '' });\n        setStateValue(stringValue);\n        return;\n      }\n\n      const stringValueWithoutSeparator = decimalSeparator\n        ? stringValue.replace(decimalSeparator, '.')\n        : stringValue;\n\n      const numberValue = parseFloat(stringValueWithoutSeparator);\n\n      const formattedValue = formatValue({\n        value: stringValue,\n        ...formatValueOptions,\n      });\n\n      if (cursorPosition !== undefined && cursorPosition !== null) {\n        // Prevent cursor jumping\n        let newCursor = cursorPosition + (formattedValue.length - value.length);\n        newCursor = newCursor <= 0 ? (prefix ? prefix.length : 0) : newCursor;\n\n        setCursor(newCursor);\n        setChangeCount(changeCount + 1);\n      }\n\n      setStateValue(formattedValue);\n\n      if (onValueChange) {\n        const values: CurrencyInputOnChangeValues = {\n          float: numberValue,\n          formatted: formattedValue,\n          value: stringValue,\n        };\n        onValueChange(stringValue, name, values);\n      }\n    };\n\n    /**\n     * Handle change event\n     */\n    const handleOnChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\n      const {\n        target: { value, selectionStart },\n      } = event;\n\n      processChange(value, selectionStart);\n\n      onChange && onChange(event);\n    };\n\n    /**\n     * Handle focus event\n     */\n    const handleOnFocus = (event: React.FocusEvent<HTMLInputElement>): number => {\n      onFocus && onFocus(event);\n      return stateValue ? stateValue.length : 0;\n    };\n\n    /**\n     * Handle blur event\n     *\n     * Format value by padding/trimming decimals if required by\n     */\n    const handleOnBlur = (event: React.FocusEvent<HTMLInputElement>): void => {\n      const {\n        target: { value },\n      } = event;\n\n      const valueOnly = cleanValue({ value, ...cleanValueOptions });\n\n      if (valueOnly === '-' || !valueOnly) {\n        setStateValue('');\n        onBlur && onBlur(event);\n        return;\n      }\n\n      const fixedDecimals = fixedDecimalValue(valueOnly, decimalSeparator, fixedDecimalLength);\n\n      const newValue = padTrimValue(\n        fixedDecimals,\n        decimalSeparator,\n        decimalScale !== undefined ? decimalScale : fixedDecimalLength\n      );\n\n      const numberValue = parseFloat(newValue.replace(decimalSeparator, '.'));\n\n      const formattedValue = formatValue({\n        ...formatValueOptions,\n        value: newValue,\n      });\n\n      if (onValueChange) {\n        onValueChange(newValue, name, {\n          float: numberValue,\n          formatted: formattedValue,\n          value: newValue,\n        });\n      }\n\n      setStateValue(formattedValue);\n\n      onBlur && onBlur(event);\n    };\n\n    /**\n     * Handle key down event\n     *\n     * Increase or decrease value by step\n     */\n    const handleOnKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n      const { key } = event;\n\n      setLastKeyStroke(key);\n\n      if (step && (key === 'ArrowUp' || key === 'ArrowDown')) {\n        event.preventDefault();\n        setCursor(stateValue.length);\n\n        const currentValue =\n          parseFloat(\n            userValue !== undefined && userValue !== null\n              ? String(userValue).replace(decimalSeparator, '.')\n              : cleanValue({ value: stateValue, ...cleanValueOptions })\n          ) || 0;\n        const newValue = key === 'ArrowUp' ? currentValue + step : currentValue - step;\n\n        if (min !== undefined && newValue < min) {\n          return;\n        }\n\n        if (max !== undefined && newValue > max) {\n          return;\n        }\n\n        const fixedLength = String(step).includes('.')\n          ? Number(String(step).split('.')[1].length)\n          : undefined;\n\n        processChange(\n          String(fixedLength ? newValue.toFixed(fixedLength) : newValue).replace(\n            '.',\n            decimalSeparator\n          )\n        );\n      }\n\n      onKeyDown && onKeyDown(event);\n    };\n\n    /**\n     * Handle key up event\n     *\n     * Move cursor if there is a suffix to prevent user typing past suffix\n     */\n    const handleOnKeyUp = (event: React.KeyboardEvent<HTMLInputElement>) => {\n      const {\n        key,\n        currentTarget: { selectionStart },\n      } = event;\n      if (key !== 'ArrowUp' && key !== 'ArrowDown' && stateValue !== '-') {\n        const suffix = getSuffix(stateValue, { groupSeparator, decimalSeparator });\n\n        if (suffix && selectionStart && selectionStart > stateValue.length - suffix.length) {\n          /* istanbul ignore else */\n          if (inputRef && typeof inputRef === 'object' && inputRef.current) {\n            const newCursor = stateValue.length - suffix.length;\n            inputRef.current.setSelectionRange(newCursor, newCursor);\n          }\n        }\n      }\n\n      onKeyUp && onKeyUp(event);\n    };\n\n    useEffect(() => {\n      // prevent cursor jumping if editing value\n      if (\n        dirty &&\n        stateValue !== '-' &&\n        inputRef &&\n        typeof inputRef === 'object' &&\n        inputRef.current &&\n        document.activeElement === inputRef.current\n      ) {\n        inputRef.current.setSelectionRange(cursor, cursor);\n      }\n    }, [stateValue, cursor, inputRef, dirty, changeCount]);\n\n    /**\n     * If user has only entered \"-\" or decimal separator,\n     * keep the char to allow them to enter next value\n     */\n    const getRenderValue = () => {\n      if (\n        userValue !== undefined &&\n        userValue !== null &&\n        stateValue !== '-' &&\n        (!decimalSeparator || stateValue !== decimalSeparator)\n      ) {\n        return formatValue({\n          ...formatValueOptions,\n          decimalScale: dirty ? undefined : decimalScale,\n          value: String(userValue),\n        });\n      }\n\n      return stateValue;\n    };\n\n    const inputProps: React.ComponentPropsWithRef<'input'> = {\n      type: 'text',\n      inputMode: 'decimal',\n      id,\n      name,\n      className,\n      onChange: handleOnChange,\n      onBlur: handleOnBlur,\n      onFocus: handleOnFocus,\n      onKeyDown: handleOnKeyDown,\n      onKeyUp: handleOnKeyUp,\n      placeholder,\n      disabled,\n      value: getRenderValue(),\n      ref: inputRef,\n      ...props,\n    };\n\n    if (customInput) {\n      const CustomInput = customInput;\n      return <CustomInput {...inputProps} />;\n    }\n\n    return <input {...inputProps} />;\n  }\n);\n\nCurrencyInput.displayName = 'CurrencyInput';\n\nexport default CurrencyInput;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}